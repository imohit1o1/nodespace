generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(uuid())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  userId String @unique
  user   User?  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum Role {
  user
  admin
}

enum Status {
  active
  inactive
}

model User {
  id            String    @id @default(uuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  password      String?
  role          Role      @default(user)
  image         String?
  emailVerified DateTime?

  accounts Account[]
  sessions Session[]

  status      Status        @default(active)
  isVerfied   Boolean       @default(false)
  token       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  notes       Notes[]
  notesFolder NotesFolder[]
}

model Notes {
  id              String       @id @default(uuid())
  title           String
  content         String
  isPinned        Boolean?     @default(false)
  isFavorite      Boolean?     @default(false)
  backgroundColor String?
  textColor       String?
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  notesFolderId   String?
  notesFolder     NotesFolder? @relation(fields: [notesFolderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NotesFolder {
  id    String  @id @default(uuid())
  name  String
  notes Notes[]

  User   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
